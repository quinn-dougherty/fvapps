***
Main.lean
***

import Leetcode.TwoSum.Test
import Leetcode.Reverse.Test

def main : IO Unit := do
  println! "twosum-test"
  Leetcode.TwoSum.Test.test
  println! "reverse-test"
  Leetcode.Reverse.Test.test

***
*
***


***
Reverse.lean
***

namespace Leetcode.Reverse

--- https://leetcode.com/problems/reverse-integer/
def reverse (i: Int): Int := Id.run <| do
  let rangeMax : Int := (Int.ofNat 2^31) -1 
  let rangeMin : Int := (Int.ofNat 2^31)
  let iAbs := i.natAbs
  let isNeg := i != iAbs
  let range := if isNeg then rangeMin else rangeMax
  let (String.mk cs) := iAbs.repr
  let zeroCodePoint := '0'.toNat
  let mut result : Int := 0
  for c in cs.reverse do
    let digit := c.toNat - zeroCodePoint
    if result > (range - digit) / 10 then return 0
    result := result * 10 + digit
  if isNeg then -1 * result else result

***
*
***


***
Test.lean
***

namespace Leetcode.Test

def assertFailure (msg := "assertion failed") : IO α :=
  throw (IO.userError msg)

def assertBool (p: Bool) (msg := "assertion failed") : IO Unit :=
  unless p do assertFailure msg

def assertEqual [BEq α] [ToString α] (a : α) (b : α) (msgPrefix := "") : IO Unit :=
  unless a == b do assertFailure s!"{msgPrefix}{a} is not equal to {b}"

***
*
***


***
TwoSum.lean
***

import Std
open Std (HashMap)

namespace Leetcode.TwoSum

--- https://leetcode.com/problems/two-sum/
def twoSum (values: Array Int) (target: Int): Nat × Nat := Id.run <| do
  let mut h : HashMap Int Nat := HashMap.empty
  for i in [0:values.size] do
    let value := values[i]!
    let complement := target - value
    let complementIdx?: Option Nat := h.find? complement
    match complementIdx? with
    | some complementIdx => return (complementIdx, i)
    | none => h := h.insert value i
  pure (0,0)

***
*
***


***
Reverse/Main.lean
***

import Leetcode.Reverse.Test
open Leetcode.Reverse.Test

def main : IO Unit := test

***
*
***


***
Reverse/Test.lean
***

import Leetcode.Reverse
import Leetcode.Test

open Leetcode.Reverse
open Leetcode.Test

namespace Leetcode.Reverse.Test

def test : IO Unit := do
  assertEqual (-(Int.ofNat 2^31)) (reverse (-8463847412))
  assertEqual (Int.ofNat 2^31 - 1) (reverse 7463847412)
  assertEqual 0 (reverse (-9463847412))
  assertEqual 0 (reverse 8463847412)
  println! "All tests passed"

***
*
***


***
TwoSum/Bench.lean
***

import Leetcode.TwoSum
open Leetcode.TwoSum

namespace Leetcode.TwoSum.Bench

def testData : IO (Array Int) := do
  let range := 1000000000
  let min := 0 
  let max := 2 * range
  let capacity := 10000
  let mut data := Array.mkEmpty capacity
  for _ in [0:capacity] do
    let v <- IO.rand min max
    let vi := Int.ofNat v
    data := data.push (vi - Int.ofNat range)
  pure data

partial def getTarget (values: Array Int) : IO Int := do
  let i1 <- IO.rand 0 (values.size - 1)
  let i2 <- IO.rand 0 (values.size - 1)
  if i1 == i2
    then getTarget values
    else pure (values[i1]! + values[i2]!)

def bench : IO Unit := do
  let values <- testData
  let mut acc := 0
  for _ in [0:10000] do
    let target <- getTarget values
    let (i, j) := twoSum values target
    acc := acc + i + j
  IO.println s!"done: {acc}"

end Leetcode.TwoSum.Bench

open Leetcode.TwoSum.Bench in
def main : IO Unit := bench

***
*
***


***
TwoSum/Main.lean
***

import Leetcode.TwoSum.Test
open Leetcode.TwoSum.Test

def main : IO Unit := test

***
*
***


***
TwoSum/Test.lean
***

import Leetcode.Test
import Leetcode.TwoSum

open Leetcode.Test
open Leetcode.TwoSum

namespace Leetcode.TwoSum.Test

def test : IO Unit := do
  assertEqual (0,1) (twoSum #[1,2] 3)
  println! "All tests passed"

***
*
***

